<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Web Chat</title>
    <script src="http://localhost:3000/socket.io/socket.io.js"></script>
    <!-- <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.1.3/socket.io.js"></script> -->
    
</head>

   
<body>
    <h1>Web Chat</h1>
    <div>
        <h2 data-testid="online-user" id="user"></h2>
    </div>
    <form class="form-nickname" action="">
        <input data-testid="nickname-box" id="nickname" placeholder="Digite seu nickname" autocomplete="off">
        <button data-testid="nickname-button" id="btn-nickname" type="button">Enviar</button>
    </form>
    <div class="guests">
        <h3>UsuÃ¡rios</h3>
        <ul id="guests"></ul>
    </div>
    <div class="messages">
        <h3>Mensagens</h3>
        <ul id="messages"></ul>
    </div>
    <form class="form" action="">
        <input data-testid="message-box" id="input-message" placeholder="Digite uma nova mensagem" autocomplete="off">
        <button data-testid="send-button" id="btn-send"  type="button">Enviar</button>
    </form>
    <script>
        let userName;

        const socket = io();
        const labelUser = document.getElementById('user');

        const displayMessage = (message) => {
            const ulMessages = document.getElementById('messages');
            const li = document.createElement('li');
            const liMessages = document.createTextNode(message);
            li.setAttribute('data-testid', 'message')
            li.appendChild(liMessages);
            ulMessages.appendChild(li);
        }

        socket.on('user', (user) => {
            displayMessage(`Seja bem vindo ${user}`)
            labelUser.textContent = user;
            userName = user;
        });

        socket.on('users', (users) => {
            displayMessage(`${users[users.length - 1]} entrou`)
            const ulGests = document.getElementById('guests');
            const oldUsers = document.querySelectorAll('#usersId');

            if (oldUsers) {
                oldUsers.forEach(oldUser => oldUser.remove());
            }
    
            users.forEach((user) => {
                if (user !== userName) {
                    const li = document.createElement('li');
                    const liGuest = document.createTextNode(user);
                    li.setAttribute('id', 'usersId')
                    li.appendChild(liGuest);
                    ulGests.appendChild(li);
                }
            })
        })

        const btnSend = document.getElementById('btn-send');
        const messageSend = document.getElementById('input-message');

        btnSend.addEventListener('click', (event) => {
        event.preventDefault();

            if (messageSend.value) {
                socket.emit('message', {
                    chatMessage: messageSend.value,
                    nickname: userName
                } );
                messageSend.value = '';
            }
        });

        const btnNickname = document.getElementById('btn-nickname');
        const nickName = document.getElementById('nickname');
        
        btnNickname.addEventListener('click', (event) => {
            event.preventDefault();

            if (nickname.value) {
                labelUser.textContent = nickname.value;
                socket.emit('changeNikname', {
                    newNickname: nickname.value,
                    oldNickname: userName
                } );
                userName = nickname.value;

            }
            
            return false;
        });

        socket.on('message', (message) => {
            displayMessage(message);
        
        });
    </script>
</body>
</html>
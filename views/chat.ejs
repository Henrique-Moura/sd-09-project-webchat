<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.1.3/socket.io.js" integrity="sha512-PU5S6BA03fRv1Q5fpwXjg5nlRrgdoguZ74urFInkbABMCENyx5oP3hrDzYMMPh3qdLdknIvrGj3yqZ4JuU7Nag==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <title>Chatting</title>
  </head>
  <body>
    <form action="" id="regUserForm">
      <input type="text" id="userNameInput" placeholder="Digite seu nome" data-testid="nickname-box">
      <button data-testid="nickname-button">Editar nome de usuário</button>
    </form>

    <ul id="users"></ul>

    <form action="" id="messageForm">
      <input type="text" id="messageInput" placeholder="Digite algo" data-testid="message-box">
      <button data-testid="send-button">Enviar</button>
    </form>

    <ul id="messages">
      <% if (messages) { %>
        <% messages.forEach((message) => { %>
          <li data-testid="message"><%= `${message.timestamp} - ${message.nickname} ${message.message}` %> </li>
          <% }) %>
     <% } %>
    </ul>

    <script>


      // Referência: https://www.webtutorial.com.br/funcao-para-gerar-uma-string-aleatoria-random-com-caracteres-especificos-em-javascript/
      const generateUserName = (length) => {
        let randomString = '';
        const char = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
        for (let i = 0; i < length; i++) {
          randomString += char.charAt(Math.floor(Math.random() * char.length));
        }
        return randomString;
      }

      let randomUserName = generateUserName(16);
      const socket = io('http://localhost:3000');
      socket.emit('userLogin', randomUserName);

      const userNameForm = document.querySelector('#regUserForm');
      const userNameInput = document.querySelector('#userNameInput');

      userNameForm.addEventListener('submit', (e) => {

        e.preventDefault();

        randomUserName = userNameInput.value;

        socket.emit('updateUserName', userNameInput.value);

        userNameInput.value = ''
        return false;
      });

      const showUserName = (users) => {
        const userList = document.querySelector('#users');

        const userListLi = document.createElement('li');
        userList.innerHTML = '';
        userListLi.classList.add('userName');
        userListLi.setAttribute('data-testid', 'online-user');
        userListLi.setAttribute('id', socket.id);
        userListLi.innerText = randomUserName;
        userList.appendChild(userListLi);

        users.forEach((user) => {
          if (user.userId === socket.id) return;
          const userListLi = document.createElement('li');

          userListLi.classList.add('userName');
          userListLi.setAttribute('data-testid', 'online-user');
          userListLi.setAttribute('id', user.userId);
          userListLi.innerText = user.nickname;
          userList.appendChild(userListLi);
        });

      }


      const orderUserList = (users, id) => {
        // console.log(users);
        // console.log(id)
        const u = users.find((user) => user.userId === id)
        console.log(u);
        const ul = document.querySelector('#users');
        const li = document.querySelector(`#${u.userId}`);

        ul.prepend(li);
      }

      socket.on('userLogin', (users) => {
        showUserName(users);
        // orderUserList(users, socket.id);
      });

      socket.on('updateUserName', (users) => {
        showUserName(users);
        // orderUserList(users, socket.id);
      });

      const form = document.querySelector('#messageForm');
      const inputMessage = document.querySelector('#messageInput');

      form.addEventListener('submit', (e) => {
        const li = document.querySelector(`#${socket.id}`);

        e.preventDefault();

        const message = {
          chatMessage: inputMessage.value,
          nickname: randomUserName,
        };

        socket.emit('message', message);
        inputMessage.value = '';
        return false;
      });

      const createMessage = (message, id) => {
        const ul = document.querySelector('#messages');
        const li = document.createElement('li');
        console.log(id)
        li.innerText = message;
        li.setAttribute('data-testid', 'message');
        li.setAttribute('id', id);
        ul.appendChild(li);
      };

      socket.on('message', (message, id) => {
        createMessage(message, id);
      });

      socket.on('userDisconnect', (users) => {
        showUserName(users);
      });

      window.onbeforeunload = function(event) {
        socket.disconnect();
      };

    </script>
  </body>
</html>

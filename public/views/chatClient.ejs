<!DOCTYPE html>
<html lang="pt-br">
<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>WebChat</title>
  <link rel="stylesheet" type="text/css" href="../css/chat.css">
  <script src="..//helpers/usersFunctions.js"></script>
  <script src="http://cdnjs.cloudflare.com/ajax/libs/socket.io/3.0.4/socket.io.js"></script>
 
</head>
<body>

  <div class="content">
    <div class="content-users">

      <form class="form-users" action="">
      <input data-testid="nickname-box" class="input-users" autocomplete="off" placeholder="Alterar nickname" required />
      <button data-testid="nickname-button" class="btn-users">Salvar</button>
      </form>

      <ul class="users"></ul>

    </div>
  
    <ul class="messages"></ul>

</div>

  <form class="form-messages" action="">
    <input data-testid="message-box" class="message-input" autocomplete="off" placeholder="Digite uma nova mensagem aqui" required/>
    <button data-testid="send-button" class="btnMessages">Enviar</button>
  </form>

  <script>
    // escuta os eventos do chatServer
    const socket = io();
    let nickname = createNickname(16);
    const formUsers = document.querySelector('.form-users');
    const inputUsers = document.querySelector('.input-users');

    formUsers.addEventListener('submit', (e) => {
      e.preventDefault();
      const newNickname = inputUsers.value;
      const OldNickname = nickname;
      nickname = newNickname;
      socket.emit('alterNickname', { OldNickname, newNickname });
      inputUsers.value = '';
      return false;
    })

    const formMessages = document.querySelector('.form-messages');
    const inputMessage = document.querySelector('.message-input');
    formMessages.addEventListener('submit', (e) => {
      e.preventDefault();
      socket.emit('message', { chatMessage: inputMessage.value, nickname })
      inputMessage.value='';
      return false;
  })

  // listar o histórico
  socket.on('listAllMessages', (arrayMessagens) => {
    return arrayMessagens.map((message) => createMessage(message)); 
  })
  socket.on('message', ({message}) => createMessage(message));
  // recebendo como parâmetro o name e repassando para variavel nickname
  socket.emit('saveNickname', nickname);
  // escutando listAllUsers e criando a lista de usuários
  socket.on('listAllUsers', (users) => {
    createUser(users, nickname);
  })
  </script>
</body>
</html>